/*Also please see how we can refactor the form validation (it is not mandatory to implement it in this project, just for you to be aware of):
Create a separate file in `hooks` folder:
import {useState, useCallback} from ‘react’;
export function useFormAndValidation() {
 const [ values, setValues ] = useState({});
 const [ errors, setErrors ] = useState({});
 const [ isValid, setIsValid ] = useState(true);
 const handleChange = (e) => {
  const {name, value} = e.target
  setValues({...values, [name]: value });
  setErrors({...errors, [name]: e.target.validationMessage});
  setIsValid(e.target.closest(‘form’).checkValidity());
 };
 const resetForm = useCallback((newValues = {}, newErrors = {}, newIsValid = false) => {
  setValues(newValues);
  setErrors(newErrors);
  setIsValid(newIsValid);
 }, [setValues, setErrors, setIsValid]);
 return { values, handleChange, errors, isValid, resetForm, setValues, setIsValid };
}
And then use the hook wherever you need it:
 const {values, handleChange, errors, isValid, setValues, resetForm} = useFormAndValidation()
 */
